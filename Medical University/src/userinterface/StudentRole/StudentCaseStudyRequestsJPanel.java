/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.StudentRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.DoctorOrganization;
import Business.Organization.StudentOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.PatientTreatmentWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Sumana
 */
public class StudentCaseStudyRequestsJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private EcoSystem business;
    private UserAccount userAccount;
    private Organization studentOrganization;
    private Enterprise enterprise;

    /**
     * Creates new form LabAssistantWorkAreaJPanel
     */
    public StudentCaseStudyRequestsJPanel(JPanel userProcessContainer, UserAccount account, Organization organization, Enterprise enterprise, EcoSystem business) {
        initComponents();

        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.business = business;
        this.studentOrganization = (StudentOrganization) organization;
        
        this.enterprise = enterprise;
        
        Network currentNetwork = null;
        
        for(Network n: business.getNetworks()) {
            
            for(Enterprise en: n.getEnterpriseDirectory().getEnterpriseList()) {
                if (en == enterprise) {
                    currentNetwork = n;
                }
            }
        }
        
        
        
        for(Enterprise en: currentNetwork.getEnterpriseDirectory().getEnterpriseList()) {
            for (Organization orgs : en.getOrganizationDirectory().getOrganizations()) {
                
                                if (orgs instanceof DoctorOrganization) {
                                    this.studentOrganization =  orgs;
                                    break;
                                }
                            }
        }
        
        
        
        
        System.err.println(this.studentOrganization.getWorkQueue().getWorkRequests().size());

        populateTable();
    }

    public void populateTable() {
        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();

        model.setRowCount(0);

        for (WorkRequest request : studentOrganization.getWorkQueue().getWorkRequests()) {
            Object[] row = new Object[6];
            row[0] = request;
            // row[1] = request.getSender().getEmployee().getName();
            row[1] = ((PatientTreatmentWorkRequest) request).getStudentAssistant();
            row[2] = ((PatientTreatmentWorkRequest) request).getCaseStudyStatus();
            row[3] = ((PatientTreatmentWorkRequest) request).getPatient().getPatientFirstName() + " " + ((PatientTreatmentWorkRequest) request).getPatient().getPatientLastName();
            row[4] = ((PatientTreatmentWorkRequest) request).getPatient().getPatientId();
            model.addRow(row);
        }
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
        workRequestJTable.setRowSorter(sorter);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        assignJButton = new javax.swing.JButton();
        processJButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        requestProfApprovalJButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(null);

        workRequestJTable.setBackground(new java.awt.Color(2, 79, 133));
        workRequestJTable.setFont(new java.awt.Font("Skia", 0, 14)); // NOI18N
        workRequestJTable.setForeground(new java.awt.Color(255, 255, 255));
        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Message", "Sender", "Receiver", "Case Study Status", "Patient Name", "Patient Id"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);

        add(jScrollPane1);
        jScrollPane1.setBounds(20, 110, 730, 90);

        assignJButton.setBackground(new java.awt.Color(2, 79, 133));
        assignJButton.setFont(new java.awt.Font("Skia", 1, 14)); // NOI18N
        assignJButton.setForeground(new java.awt.Color(255, 255, 255));
        assignJButton.setText("Assign to me");
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });
        add(assignJButton);
        assignJButton.setBounds(80, 260, 140, 40);

        processJButton.setBackground(new java.awt.Color(2, 79, 133));
        processJButton.setFont(new java.awt.Font("Skia", 1, 14)); // NOI18N
        processJButton.setForeground(new java.awt.Color(255, 255, 255));
        processJButton.setText("Process");
        processJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processJButtonActionPerformed(evt);
            }
        });
        add(processJButton);
        processJButton.setBounds(550, 260, 140, 40);

        jLabel3.setFont(new java.awt.Font("Skia", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(2, 79, 133));
        jLabel3.setText("Case Study Work Queue");
        add(jLabel3);
        jLabel3.setBounds(230, 40, 310, 29);

        requestProfApprovalJButton.setBackground(new java.awt.Color(2, 79, 133));
        requestProfApprovalJButton.setFont(new java.awt.Font("Skia", 1, 14)); // NOI18N
        requestProfApprovalJButton.setForeground(new java.awt.Color(255, 255, 255));
        requestProfApprovalJButton.setText("Request Professor Approval");
        requestProfApprovalJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestProfApprovalJButtonActionPerformed(evt);
            }
        });
        add(requestProfApprovalJButton);
        requestProfApprovalJButton.setBounds(260, 260, 250, 40);
    }// </editor-fold>//GEN-END:initComponents

    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed
        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null,"Please select a row to assign");
            return;
        }

        PatientTreatmentWorkRequest request = (PatientTreatmentWorkRequest) workRequestJTable.getValueAt(selectedRow, 0);
         if (request.getLabAssistant() == null) {
            if (request.getCaseStudyStatus().equalsIgnoreCase("SentToStudent")) {
                request.setStudentAssistant(userAccount);
                request.setCaseStudyStatus("Pending on Student Assistant");
                populateTable();
                JOptionPane.showMessageDialog(null, "The request is assigned to you");
            } else {
                JOptionPane.showMessageDialog(null, "Cannot assign this lab request as the current status is: " + request.getCaseStudyStatus());
            }
        } else {
            if(userAccount.equals(request.getStudentAssistant()))
            {
                JOptionPane.showMessageDialog(null,"Request is already assigned to you");
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Request is assigned to other Student Assistant");
            }
        }
        
    }//GEN-LAST:event_assignJButtonActionPerformed

    private void processJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processJButtonActionPerformed
        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row to process");
            return;
        }
        
        PatientTreatmentWorkRequest request = (PatientTreatmentWorkRequest) workRequestJTable.getValueAt(selectedRow, 0);

       // request.setStatus("Processing");
        ProcessWorkRequestJPanel processWorkRequestJPanel = new ProcessWorkRequestJPanel(userProcessContainer, request);
        if (request.getLabAssistant() != null) {
            if (userAccount.equals(request.getStudentAssistant())) {
                if (request.getCaseStudyStatus().equalsIgnoreCase("Pending on Student Assistant")) {

                    userProcessContainer.add("processWorkRequestJPanel", processWorkRequestJPanel);
                    CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                    layout.next(userProcessContainer);
                } else {
                    JOptionPane.showMessageDialog(null, "Cannot process the request as the status is: " + request.getStatus());
                }

            } else {

                JOptionPane.showMessageDialog(null, "You are not authorised to process the request");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please assign the request first before proceeding");
        }
    }//GEN-LAST:event_processJButtonActionPerformed

    
    
    private void requestProfApprovalJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestProfApprovalJButtonActionPerformed

        int selectedRow = workRequestJTable.getSelectedRow();
        PatientTreatmentWorkRequest workRequest;

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row to request");
            return;
        } else {
            workRequest = (PatientTreatmentWorkRequest) workRequestJTable.getValueAt(selectedRow, 0);
            if (workRequest.getAssignedDoctor() != null) {
                if (userAccount.equals(workRequest.getAssignedDoctor())) {
                    if (workRequest.getStatus().equalsIgnoreCase("Under Consultation")) {

                        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                        userProcessContainer.add("RequestCaseStudyProfessorApprovalJPanel", new RequestCaseStudyProfessorApprovalJPanel(userProcessContainer, userAccount, enterprise, workRequest));
                        layout.next(userProcessContainer);
                    } else {
                        JOptionPane.showMessageDialog(null, "Cannot create the Lab request as the current status is " + workRequest.getStatus());
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "You are not Authorised");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please assign the request first");
            }
        }

    }//GEN-LAST:event_requestProfApprovalJButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignJButton;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton processJButton;
    private javax.swing.JButton requestProfApprovalJButton;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
